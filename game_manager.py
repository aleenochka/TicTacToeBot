from sqlalchemy.orm import Session
import game
import random
from telebot.types import Message
from telebot import TeleBot

from core.db import get_db
from core.db_helper import update_user_stats

queueChatIds: list[int] = []
activeGames: list[game.Game] = []

# –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
def processANewGameRequest(b: TeleBot, message: Message):
    chatId = message.chat.id
    if getCurrentPlayerGame(chatId):  # –£–∂–µ –≤ –∏–≥—Ä–µ
        b.send_message(chatId, '–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')
        return
    if chatId in queueChatIds:  # –£–∂–µ –æ–∂–∏–¥–∞–µ—Ç –∏–≥—Ä—ã
        b.send_message(chatId, '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è!')
        return

    if len(queueChatIds) == 0:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
        queueChatIds.append(chatId)
        b.send_message(chatId, '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /leavegame')
        return

    otherPlayerID = queueChatIds[0]
    queueChatIds.pop(0)
    startNewGame(b, chatId, otherPlayerID)

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
def startNewGame(b: TeleBot, id1, id2):
    newGame = game.Game()

    data1 = game.PlayerData()
    data1.pId = id1
    data1.markedCells = []

    data2 = game.PlayerData()
    data2.pId = id2
    data2.markedCells = []

    if random.randint(0, 1):
        data1.sign = 'X'
        data2.sign = 'O'
        newGame.p1TurnNow = True
    else:
        data1.sign = 'O'
        data2.sign = 'X'
        newGame.p1TurnNow = False

    newGame.p1 = data1
    newGame.p2 = data2

    activeGames.append(newGame)
    for chatId in [data1.pId, data2.pId]:
        b.send_message(chatId, '–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!')

    displayStateAskAndStopAtWin(b, newGame)


def processAMoveRequest(b: TeleBot, message: Message, text=None):
    chatId = message.chat.id
    game = getCurrentPlayerGame(chatId)
    if not game:
        b.send_message(chatId, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, –Ω–∞–ø–∏—Å–∞–≤ /joingame')
        return

    if chatId == game.p2.pId and game.p1TurnNow or chatId == game.p1.pId and not game.p1TurnNow:
        b.send_message(chatId, '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!')
        return

    if not text:
        text = message.text
    text = text.replace(' ', '')
    if len(text) != 2:
        b.send_message(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–≤—É—Ö —á–∏—Å–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä "1 3"')
        return

    try:
        coord1 = int(text[0])
        coord2 = int(text[1])
    except ValueError:
        b.send_message(chatId, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "1 3"')
        return

    performNextMovement(b, game, (coord1 - 1, coord2 - 1))

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
def performNextMovement(b: TeleBot, game: game.Game, coords):
    p = game.p2
    otherP = game.p1
    if game.p1TurnNow:  # –í—ã—è—Å–Ω–µ–Ω–∏–µ, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
        p = game.p1
        otherP = game.p2

    if coords[0] < 0 or coords[0] > 2 or coords[1] < 0 or coords[1] > 2:
        b.send_message(p.pId, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1-3]!')
        return

    if coords in p.markedCells:
        b.send_message(p.pId, '–í—ã —É–∂–µ –∑–∞–Ω—è–ª–∏ —ç—Ç—É –∫–ª–µ—Ç–∫—É!')
        return

    if coords in otherP.markedCells:
        b.send_message(p.pId, '–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç—É –∫–ª–µ—Ç–∫—É!')
        return

    p.markedCells.append(coords)
    game.p1TurnNow = not game.p1TurnNow

    maybeWinner = game.checkSomeoneWon()
    maybeADraw = game.checkADraw()
    displayStateAskAndStopAtWin(b, game, winner=maybeWinner, draw=maybeADraw)



# –ó–∞–ø—Ä–æ—Å –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É
def processLeaveGameRequest(b: TeleBot, message: Message, db: Session = None):
    if db is None:
        db = next(get_db())  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞

    chatId = message.chat.id
    game = getCurrentPlayerGame(chatId)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–≥—Ä–æ–∫–∞
    if not game:
        if chatId in queueChatIds:  # –ò–≥—Ä–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
            queueChatIds.remove(chatId)  # –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            b.send_message(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –∏–≥—Ä—ã')
            return
        else:
            b.send_message(chatId, '–í—ã —É–∂–µ –Ω–µ –≤ –∏–≥—Ä–µ!')  # –ò–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ
            return

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥
    otherP = game.p1
    if otherP.pId == chatId:  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ ‚Äî –ø–µ—Ä–≤—ã–π
        otherP = game.p2

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    update_user_stats(chatId, 0, 1, 0, db)  # –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
    update_user_stats(otherP.pId, 1, 0, 0, db)  # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    b.send_message(chatId, '–ò–≥—Ä–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    b.send_message(otherP.pId, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É')
    activeGames.remove(game)  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å
def getCurrentPlayerGame(chatId):
    for g in activeGames:
        if g.p1.pId == chatId or g.p2.pId == chatId:
            return g

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
def displayStateAskAndStopAtWin(b: TeleBot, game: game.Game, winner: game.PlayerData = None, draw: bool = None):
    displayCurrentStateForPlayer(b, game, game.p1, winner, draw)
    displayCurrentStateForPlayer(b, game, game.p2, winner, draw)
    if winner or draw:
        activeGames.remove(game)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def displayCurrentStateForPlayer(b: TeleBot, game: game.Game, p: game.PlayerData, winner: game.PlayerData = None, draw: bool = None):
    s = '–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:\n\n' + game.getVisualBoardState() + '\n\n'
    if not winner and not draw:
        s += '–í–∞—à —Å–∏–º–≤–æ–ª: ' + p.sign + '\n'
        if game.p1TurnNow and p == game.p1 or not game.p1TurnNow and p == game.p2:
            s += '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–¥–≤–∞ —á–∏—Å–ª–∞ - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞):'
        else:
            s += '–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...'
    elif winner:
        if p == winner:
            s += '–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ'
        else:
            s += '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'
    elif draw:
        s += '–ù–∏—á—å—è!\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    b.send_message(p.pId, s)
